{
  "name": "truckercore1-web",
  "version": "1.2.0",
  "private": true,
  "description": "TruckerCore - Smart Logistics Platform for Modern Trucking",
  "repository": {
    "type": "git",
    "url": "https://github.com/your-org/truckercore.git"
  },
  "main": "dist-electron/main.js",
  "scripts": {
    "validate": "node scripts/validate.js",
    "validate:quick": "node scripts/validate.js --level=basic",
    "validate:full": "node scripts/validate.js --level=comprehensive",
    "validate:critical": "node scripts/validate.js --level=critical-only",
    "validate:report": "node scripts/validate.js --report --output=validation-report.md",
    "validate:legacy": "node scripts/validate-production.js",
    "preproduction": "npm run validate",
    "validate:production": "./scripts/production-validation.sh", 
    "dlq:export": "node scripts/dlq/export-dlq.mjs",
    "dlq:count": "node scripts/dlq/count-by-operation.mjs",
    "dlq:manual": "node scripts/dlq/manual-dlq-replay.mjs",
    "dlq:replay": "node scripts/dlq/replay-dlq.mjs",
    "configure": "ts-node scripts/configure-integrations.ts",
    "validate:env": "ts-node scripts/validate-env.ts",
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "npm --prefix apps/web run lint",
    "typecheck": "npm --prefix apps/web run typecheck && tsc -p sdk/tsconfig.json",
    "test": "jest --runInBand",
    "test:unit": "vitest",
    "test:unit:watch": "vitest --watch",
    "test:run": "vitest run",
    "test:coverage": "vitest run --coverage",
    "test:ci": "vitest run --reporter=verbose --reporter=json --outputFile=test-results.json",
    "test:ui": "vitest --ui",
    "test:e2e": "npm --prefix apps/web run e2e",
    "test:integration": "node scripts/integration-test-all.mjs",
    "test:api:stage": "newman run ./docs/postman/truckercore-R1-full.postman_collection.json -e ./docs/postman/truckercore-stage.postman_environment.json --timeout-request 20000 --insecure --color on --reporters cli,htmlextra --reporter-htmlextra-export ./newman/report-stage.html",
    "test:api:prod": "newman run ./docs/postman/truckercore-R1-full.postman_collection.json -e ./docs/postman/truckercore-prod.postman_environment.json --timeout-request 20000 --insecure --color on --reporters cli,htmlextra --reporter-htmlextra-export ./newman/report-prod.html",
    "test:rpcs": "node test_rpcs.js",
    "ci:newman:edge-canary": "newman run ./docs/postman/truckercore-canary-edge-functions.postman_collection.json -e ./docs/postman/truckercore-stage.postman_environment.json --reporters cli,htmlextra --reporter-htmlextra-export newman/edge-canary.html",
    "test:ef:status": "newman run docs/postman/status_diagnostics_collection.json --env-var baseUrl=$BASE_URL --env-var api_key=$API_KEY --env-var org_id=$ORG_ID --env-var user_id=$USER_ID --reporters cli,htmlextra --reporter-htmlextra-export newman/status-diagnostics.html",
    "preflight": "node scripts/preflight-check.mjs",
    "worker:webhooks": "node scripts/worker_webhooks.mjs",
    "server:demo": "node scripts/server/app_demo.mjs",
    "jobs:idempotency-sweep": "node -e \"import('file://'+process.cwd().replace(/\\\\/g,'/')+'/scripts/server/middleware_idempotency.mjs').then(m=>m.sweepIdempotency(72).then(r=>console.log(String(r||'OK')))).catch(e=>{console.error(e);process.exit(1);});\"",
    "jobs:retention-sweep": "node -e \"import('file://'+process.cwd().replace(/\\\\/g,'/')+'/jobs/retention-sweep.ts').then(m=>m.runRetentionSweep());\"",
    "jobs:retention-dry": "node -e \"import('file://'+process.cwd().replace(/\\\\/g,'/')+'/jobs/retention-sweep.ts').then(m=>m.runRetentionSweep({dryRun:true}));\"",
    "build:sdk": "cd sdk && npm run build",
    "contract:test": "node scripts/validate-events.js",
    "chaos:subscriber": "ts-node chaos/subscriber-simulator.ts",
    "scan:logs": "node scripts/security/log_scan.mjs",
    "security:verify-webhooks": "node scripts/security/webhook_verify.mjs",
    "security:test-rotation": "node scripts/webhooks/rotation_test.mjs",
    "generate:invites": "node scripts/generate_invite_qr.js --org_id=%ORG_ID% --count=50 --out=./qr_codes",
    "generate:badges": "node scripts/generate-status-badge.mjs",
    "serve:stripe:webhook": "node scripts/stripe_webhook.js",
    "functions:deploy:all": "node scripts/deploy_all.mjs",
    "audit:deps": "node scripts/dependency-audit.mjs",
    "audit": "npm audit",
    "audit:report": "npm audit --json > security-audit.json",
    "audit:check": "npm audit --audit-level=moderate",
    "audit:fix": "npm audit fix",
    "audit:fix:force": "npm audit fix --force",
    "outdated": "npm outdated",
    "update:patch": "npm update --save",
    "update:check": "npx npm-check-updates",
    "security:metrics": "npx ts-node scripts/security-metrics.ts",
    "test:report": "npx ts-node scripts/test-report.ts",
    "coverage:check": "npm run test:coverage && npx ts-node scripts/test-report.ts check",
    "test:jest": "jest",
    "test:jest:watch": "jest --watch",
    "test:jest:coverage": "jest --coverage",
    "clean:test": "rm -rf coverage test-results.json test-report.md",
    "validate:mobile-metadata": "node scripts/ci/validate_mobile_metadata.mjs",
    "validate:policies": "node scripts/ci/validate_policies.mjs",
    "validate:store-assets": "node scripts/ci/validate_store_assets.mjs",
    "ci:store-readiness": "npm run validate:policies && npm run validate:mobile-metadata && npm run validate:store-assets",
    "rollout:flags": "node scripts/release/toggle_flags.mjs",
    "rollout:warm": "node scripts/release/warm_endpoints.mjs",
    "rollout:health": "node scripts/release/health_check.mjs",
    "rollout:evidence": "node scripts/release/evidence_capture.mjs",
    "release:tag": "bash scripts/release/tag.sh",
    "deploy:safety-suite": "node scripts/deploy_safety_summary_suite.mjs",
    "deploy:safety-suite:dry": "DRY_RUN=1 node scripts/deploy_safety_summary_suite.mjs",
    "deploy:safety-suite:win": "powershell -ExecutionPolicy Bypass -File ./scripts/Deploy-SafetySuite.ps1",
    "deploy:safety-suite:win-dry": "powershell -ExecutionPolicy Bypass -File ./scripts/Deploy-SafetySuite.ps1 -DryRun",
    "verify:safety-suite": "node scripts/verify_safety_summary.mjs",
    "verify:safety-suite:win": "powershell -ExecutionPolicy Bypass -File ./scripts/Verify-SafetySuite.ps1",
    "verify:safety-suite:full": "node scripts/final-verification.mjs",
    "setup:env:win": "powershell -ExecutionPolicy Bypass -File ./scripts/Setup-Environment.ps1 -Save",
    "check:homepage-assets": "node scripts/check-homepage-assets.mjs",

    "validate:seo": "node scripts/validate-seo.js",
    "validate:build": "npm run validate:seo && npm run typecheck && npm run build",
    "prebuild": "npm run validate:seo",

    "deploy": "./deploy.sh",
    "deploy:fast": "./deploy.sh --skip-tests",
    "deploy:force": "./deploy.sh --force",

    "check:status": "bash scripts/deployment-status.sh",
    "check:debug": "bash scripts/debug-vercel-404.sh",
    "check:production": "bash scripts/verify-production.sh",
    "fix:404": "bash scripts/fix-404.sh",

    "test:routes": "bash scripts/test-local-routes.sh",
    "test:predeploy": "bash scripts/pre-deploy-test.sh",

    "monitor": "bash scripts/status-dashboard.sh",
    "monitor:logs": "vercel logs --follow",

    "assets:generate": "node scripts/generate-icons.js",
    "assets:check": "bash scripts/pre-production-checklist.sh",

    "test:local:routes": "bash scripts/test-local-routes.sh",
    "check:assets:prod": "bash scripts/preprod-asset-check.sh",
    "verify:prod": "bash scripts/verify-production.sh",
    "monitor:launch": "bash scripts/monitor-launch.sh",
    "deploy:prod": "bash scripts/deploy.sh",
    "setup:monitoring": "bash scripts/setup-monitoring.sh",
    "generate:icons": "node scripts/generate-icons.js",

    "verify:homepage": "node scripts/verify-homepage.mjs",
    "verify:homepage:prod": "BASE_URL=https://truckercore.com node scripts/verify-homepage.mjs",
    "verify:homepage:local": "BASE_URL=http://localhost:3000 node scripts/verify-homepage.mjs",
    "verify:all": "npm run verify:homepage:prod && npm run verify:safety-suite:full",

    "precommit": "npm run lint && npm run typecheck && npm run test:unit",
    "predeploy": "npm run preflight && npm run verify:all",
    "launch": "npm run preflight && npm run deploy:safety-suite && npm run verify:all && npm run test:integration",

    "checklist": "node scripts/final-checklist.mjs",
    "ready": "npm run checklist && npm run preflight && echo \"\nâœ… READY FOR DEPLOYMENT\"",
    "// === DEPLOYMENT - SHIP IT! ðŸš¢ ===": "",
    "ship": "bash scripts/ultimate-launch.sh",
    "ship:fast": "npm run deploy:fast",
    "ship:now": "npm run deploy:preflight && npm run deploy",

    "logs:vercel": "vercel logs --follow",
    "logs:ef": "supabase functions logs refresh-safety-summary",
    "rollback:git": "git revert HEAD && git push origin main",
    "rollback:disable-features": "npm run rollout:flags -- --disable safety_summary,risk_corridors",
    "// === DNS VERIFICATION ===": "",
    "dns:check": "node scripts/dns/check-cross-platform.js",
    "dns:check:unix": "node scripts/dns/check.mjs truckercore.com www.truckercore.com app.truckercore.com api.truckercore.com downloads.truckercore.com",
    "dns:check:win": "powershell -ExecutionPolicy Bypass -File scripts/dns/check-windows.ps1",
    "dns:flush:win": "powershell -ExecutionPolicy Bypass -File scripts/dns/flush-cache-windows.ps1",
    "dns:detailed:win": "powershell -ExecutionPolicy Bypass -File scripts/dns/detailed-check-windows.ps1",
    "dns:guide": "node scripts/dns/open-guide.mjs",
    "dns:ci": "node scripts/dns/ci-assert.mjs",
    "check:dns": "npm run dns:check",
    "dev:tools:win": "powershell -ExecutionPolicy Bypass -File scripts/windows-dev-tools.ps1",
    "final:check": "bash ./final-check.sh",
    "deploy:preflight": "bash scripts/final-deployment-check.sh",
    "deploy:now": "npm run deploy:preflight && npm run deploy",
    "verify:fix": "powershell -ExecutionPolicy Bypass -File scripts/verify-fix.ps1",
    "deploy:fix": "powershell -ExecutionPolicy Bypass -File ./deploy-fix.ps1",

    "build:electron": "tsc -p electron/tsconfig.json",
    "electron": "electron .",
    "electron:dev": "concurrently \"npm run dev\" \"wait-on http://localhost:3000 && ELECTRON_BUILD=1 electron .\"",
    "pack": "ELECTRON_BUILD=1 npm run build && npm run build:electron && electron-builder --dir",
    "dist": "ELECTRON_BUILD=1 npm run build && npm run build:electron && npm run migrate && electron-builder",
    "dist:mac": "ELECTRON_BUILD=1 npm run build && npm run build:electron && npm run migrate && electron-builder --mac",
    "dist:win": "ELECTRON_BUILD=1 npm run build && npm run build:electron && npm run migrate && electron-builder --win",
    "dist:linux": "ELECTRON_BUILD=1 npm run build && npm run build:electron && npm run migrate && electron-builder --linux",
    "migrate": "ts-node electron/database/migrate-cli.ts migrate",
      "migrate:status": "ts-node electron/database/migrate-cli.ts status",
      "migrate:rollback": "ts-node electron/database/migrate-cli.ts rollback",
      "postinstall": "electron-builder install-app-deps",

      "db:setup": "node scripts/db/setup.mjs",
      "db:seed": "node scripts/db/seed.mjs",
      "db:setup:test": "node scripts/db/setup.mjs",

      "test": "vitest",
      "test:unit": "vitest --config vitest.config.unit.ts",
      "test:integration:legacy": "node scripts/integration-test-all.mjs",
      "test:integration": "vitest --config vitest.config.integration.ts",
      "test:e2e": "playwright test",
      "test:all": "npm run test:unit && npm run test:integration && npm run test:e2e",
      "test:ci": "vitest run --coverage --config vitest.config.ts",
      "test:unit:ci": "vitest run --coverage --config vitest.config.unit.ts",
      "test:integration:ci": "vitest run --coverage --config vitest.config.integration.ts",
      "test:watch": "vitest --watch",
      "test:ui": "vitest --ui",
      "test:coverage": "vitest run --coverage",
      "test:coverage:open": "vitest run --coverage && (xdg-open coverage/index.html || open coverage/index.html || start coverage/index.html)",
      "test:quick": "vitest run --changed",
      "test:related": "vitest related",
      "test:debug": "vitest --inspect-brk --inspect --single-thread",
      "bench": "vitest bench",
      "bench:watch": "vitest bench --watch",
      "bench:ui": "vitest bench --ui",
      "test:mutation": "stryker run",
      "coverage:report": "npm run test:coverage && ts-node scripts/generate-coverage-report.ts",
      "coverage:dashboard": "npm run coverage:report && (xdg-open coverage/dashboard.html || open coverage/dashboard.html || start coverage/dashboard.html)",
      "test:flaky": "ts-node scripts/detect-flaky-tests.ts",
      "test:flaky:ci": "ts-node scripts/detect-flaky-tests.ts 20",
      "test:quality": "ts-node scripts/test-quality-metrics.ts",
      "test:full": "npm run test:quality && npm run test:all && npm run coverage:report",
      "test:visual": "playwright test tests/visual"
    },
  "build": {
    "appId": "com.truckercore.desktop",
    "productName": "TruckerCore",
    "directories": {
      "buildResources": "resources",
      "output": "release"
    },
    "files": [
      "out/**/*",
      "dist-electron/**/*",
      "resources/**/*",
      "package.json"
    ],
    "extraMetadata": {
      "main": "dist-electron/main.js"
    },
    "mac": {
      "category": "public.app-category.business",
      "icon": "resources/icon.icns",
      "target": [
        { "target": "dmg", "arch": ["x64", "arm64"] },
        { "target": "zip", "arch": ["x64", "arm64"] }
      ],
      "hardenedRuntime": true,
      "gatekeeperAssess": false,
      "entitlements": "resources/entitlements.mac.plist",
      "entitlementsInherit": "resources/entitlements.mac.plist"
    },
    "dmg": {
      "contents": [
        { "x": 130, "y": 220 },
        { "x": 410, "y": 220, "type": "link", "path": "/Applications" }
      ]
    },
    "win": {
      "icon": "resources/icon.ico",
      "target": [
        { "target": "nsis", "arch": ["x64", "ia32"] },
        { "target": "portable", "arch": ["x64"] }
      ]
    },
    "nsis": {
      "oneClick": false,
      "perMachine": false,
      "allowToChangeInstallationDirectory": true,
      "deleteAppDataOnUninstall": false
    },
    "linux": {
      "icon": "resources/icon.png",
      "category": "Office",
      "target": ["AppImage", "deb", "rpm"]
    },
    "protocols": [
      { "name": "TruckerCore Protocol", "schemes": ["truckercore"] }
    ]
  },
  "dependencies": {
    "@json2csv/plainjs": "^6.0.0",
    "json2csv": "^6.0.0",
    "jspdf": "^2.5.1",
    "jspdf-autotable": "^3.8.2",
    "html2canvas": "^1.4.1",
    "xlsx": "^0.18.5",
    "@supabase/supabase-js": "^2.57.2",
    "express": "^4.19.2",
    "ioredis": "^5.3.2",
    "next": "^14.2.32",
    "papaparse": "^5.4.1",
    "prom-client": "^15.1.3",
    "qrcode": "1.5.3",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "axios": "^1.7.7",
    "stripe": "^14.25.0",
    "uuid": "^9.0.1",
    "zod": "^3.23.8",
    "electron-updater": "^6.1.7",
    "electron-log": "^5.1.2",
    "keytar": "^7.9.0",
    "leaflet": "^1.9.4",
    "react-leaflet": "^4.2.1",
        "react-chartjs-2": "^5.2.0",
        "chart.js": "^4.4.3",
    "@sendgrid/mail": "^8.1.4",
    "twilio": "^5.5.2"
  },
  "optionalDependencies": {
    "better-sqlite3": "^9.6.0"
  },
  "devDependencies": {
    "@types/jest": "^29.5.12",
    "@types/ioredis": "^4.28.10",
    "@types/node": "^20.14.10",
    "@types/better-sqlite3": "^7.6.9",
    "ajv": "^8.17.1",
    "ajv-formats": "^3.0.1",
    "jest": "^29.7.0",
    "nock": "^13.5.0",
    "newman": "^6.1.2",
    "newman-reporter-htmlextra": "^1.23.0",
    "supertest": "^6.3.4",
    "ts-jest": "^29.2.5",
    "ts-node": "^10.9.2",
    "typescript": "^5.6.2",
    "vitest": "^2.0.5",
    "concurrently": "^8.2.0",
    "wait-on": "^7.0.1",
    "electron": "^28.0.0",
    "electron-builder": "^24.9.1",
    "serve": "^14.2.0",
    "source-map-explorer": "^2.5.3",
    "@stryker-mutator/core": "^8.0.0",
    "@stryker-mutator/vitest-runner": "^8.0.0"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  },
  "overrides": {
    "jose": "^4.15.5"
  }
}
