-- ENUMs
create type if not exists public.hazard_type as enum (
  'traffic_slowdown','collision','roadwork','debris','weather','closure','police','lane_restriction'
);

create type if not exists public.hazard_severity as enum ('low','medium','high','critical');

create type if not exists public.hazard_status as enum ('active','clearing','resolved','dismissed');

-- Hazards (point geometry; keep lat/lng for easy client queries)
create table if not exists public.hazards (
  id uuid primary key default gen_random_uuid(),
  type hazard_type not null,
  severity hazard_severity not null default 'medium',
  status hazard_status not null default 'active',
  title text,
  description text,
  source text default 'ingest',
  lat double precision not null,
  lng double precision not null,
  geom geography(point,4326) generated always as (ST_SetSRID(ST_MakePoint(lng,lat),4326)::geography) stored,
  road text,
  mm_ref text,
  detected_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  fleet_id uuid,
  vehicle_id uuid,
  extra jsonb default '{}'::jsonb
);

create index if not exists hazards_gix on public.hazards using gist (geom);
create index if not exists hazards_status_idx on public.hazards(status);
create index if not exists hazards_fleet_idx on public.hazards(fleet_id);
create index if not exists hazards_detected_idx on public.hazards(detected_at desc);

-- Event log for accuracy/latency analytics
create table if not exists public.hazard_events (
  id bigint generated by default as identity primary key,
  hazard_id uuid references public.hazards(id) on delete cascade,
  event_type text not null,
  driver_id uuid,
  occurred_at timestamptz not null default now(),
  payload jsonb default '{}'::jsonb
);

-- Coaching tips generated by trigger
create table if not exists public.coaching_tips (
  id uuid primary key default gen_random_uuid(),
  hazard_id uuid not null references public.hazards(id) on delete cascade,
  fleet_id uuid,
  driver_id uuid,
  tip text not null,
  created_at timestamptz not null default now(),
  consumed_at timestamptz,
  status text not null default 'new'
);

-- KPI snapshot (daily)
create table if not exists public.hazard_kpis_daily (
  day date primary key,
  alerts_total integer not null default 0,
  alerts_active_max integer not null default 0,
  p50_latency_ms integer,
  p95_latency_ms integer,
  false_positive_rate numeric,
  driver_ack_rate numeric,
  incidents_per_100k_miles numeric,
  coaching_follow_through numeric,
  system_uptime numeric
);

-- Update timestamp
create or replace function public.tg_set_updated_at()
returns trigger language plpgsql as $$
begin
  new.updated_at := now(); 
  return new;
end$$;

drop trigger if exists tg_hazards_updated on public.hazards;
create trigger tg_hazards_updated before update on public.hazards
for each row execute function public.tg_set_updated_at();

-- Coaching tip generator + event audit
create or replace function public.tg_generate_coaching_tip()
returns trigger language plpgsql as $$
declare
  msg text;
begin
  if (tg_op = 'INSERT') then
    msg := case new.type
      when 'traffic_slowdown' then 'Traffic slowing ahead. Reduce speed gradually, increase following distance.'
      when 'collision'        then 'Collision reported ahead. Prepare for sudden stops; avoid lane changes near scene.'
      when 'roadwork'         then 'Work zone ahead. Observe reduced speed and watch for workers/equipment.'
      when 'debris'           then 'Debris on roadway. Slow down and avoid abrupt maneuvers.'
      when 'weather'          then 'Severe weather ahead. Increase headway, use lights, and consider safe stop options.'
      when 'closure'          then 'Road closure ahead. Follow detour guidance from TruckerCore routing.'
      when 'police'           then 'Enforcement area. Maintain legal speed and lane discipline.'
      when 'lane_restriction' then 'Lane restriction ahead. Merge early and avoid late merges.'
      else 'Hazard ahead. Drive defensively.'
    end;

    insert into public.coaching_tips(hazard_id,fleet_id,driver_id,tip)
    values (new.id,new.fleet_id,new.vehicle_id,msg);
  end if;

  insert into public.hazard_events(hazard_id,event_type,payload)
    values (new.id, lower(tg_op), to_jsonb(new));

  return new;
end$$;

drop trigger if exists tg_hazards_coaching on public.hazards;
create trigger tg_hazards_coaching after insert on public.hazards
for each row execute function public.tg_generate_coaching_tip();

-- Basic RLS (multi-tenant)
alter table public.hazards enable row level security;
alter table public.hazard_events enable row level security;
alter table public.coaching_tips enable row level security;

-- Helpers to read JWT/app headers
create or replace function public.current_app_fleet_id() returns uuid
language sql stable as $$
  select nullif(
    (current_setting('request.jwt.claims', true)::jsonb ->> 'app_fleet_id')::text, ''
  )::uuid
$$;

-- Policies: tenants see their hazards + public ones (null fleet_id); service_role bypass
do $$
begin
  if not exists (select 1 from pg_policies where polname='hazards_tenant_read') then
    create policy hazards_tenant_read on public.hazards
      for select using (
        auth.role() = 'service_role'
        or fleet_id is null
        or fleet_id = public.current_app_fleet_id()
      );
  end if;

  if not exists (select 1 from pg_policies where polname='hazard_events_tenant_read') then
    create policy hazard_events_tenant_read on public.hazard_events
      for select using (
        auth.role() = 'service_role'
        or exists (
          select 1 from public.hazards h
          where h.id = hazard_id
            and (h.fleet_id is null or h.fleet_id = public.current_app_fleet_id())
        )
      );
  end if;

  if not exists (select 1 from pg_policies where polname='coaching_tips_tenant_read') then
    create policy coaching_tips_tenant_read on public.coaching_tips
      for select using (
        auth.role() = 'service_role'
        or fleet_id is null
        or fleet_id = public.current_app_fleet_id()
      );
  end if;
end $$;

-- Helpful view for grouped/summary feed items (de-dupe nearby same-type)
create or replace view public.hazard_clusters as
select
  min(id) as cluster_id,
  type,
  severity,
  status,
  date_trunc('minute', detected_at) as bucket_min,
  st_centroid(st_collect(geom::geometry))::geography as center_geom,
  count(*) as count,
  avg(lat) as lat,
  avg(lng) as lng
from public.hazards
where status in ('active','clearing')
group by type,severity,status,date_trunc('minute', detected_at);

-- Basic KPI refresh helper (can be called nightly by a cron function)
create or replace function public.refresh_hazard_kpis_daily(p_day date default current_date)
returns void
language plpgsql
security definer
set search_path = public
as $$
declare
  d date := coalesce(p_day, current_date);
  p50 integer;
  p95 integer;
  active_max integer;
begin
  -- Example latency from creation to first update (if available)
  with first_updates as (
    select h.id,
           min(e.occurred_at) filter (where e.event_type in ('updated','resolved')) as first_update_at,
           h.detected_at
    from hazards h
    left join hazard_events e on e.hazard_id = h.id
    where h.detected_at::date = d
    group by h.id, h.detected_at
  ), lat as (
    select extract(epoch from (first_update_at - detected_at))*1000 as ms
    from first_updates
    where first_update_at is not null
  )
  select
    percentile_disc(0.5) within group (order by ms)::int,
    percentile_disc(0.95) within group (order by ms)::int
  into p50, p95
  from lat;

  -- active max within day (approx by counting active/clearing created that day)
  select coalesce(max(ct), 0) into active_max
  from (
    select count(*) as ct
    from hazards
    where detected_at::date = d
      and status in ('active','clearing')
  ) s;

  insert into hazard_kpis_daily as k (day, alerts_total, alerts_active_max, p50_latency_ms, p95_latency_ms)
  select
    d,
    (select count(*) from hazards where detected_at::date = d),
    active_max,
    p50,
    p95
  on conflict (day) do update
  set alerts_total = excluded.alerts_total,
      alerts_active_max = excluded.alerts_active_max,
      p50_latency_ms = excluded.p50_latency_ms,
      p95_latency_ms = excluded.p95_latency_ms;
end $$;

revoke all on function public.refresh_hazard_kpis_daily(date) from public;
grant execute on function public.refresh_hazard_kpis_daily(date) to service_role;
