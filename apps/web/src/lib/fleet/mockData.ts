import type { Vehicle, Driver, Load as FleetLoad, Alert, Geofence, MaintenanceRecord, Location } from '../../types/fleet';

function rand(min: number, max: number) { return Math.random() * (max - min) + min; }
function choice<T>(arr: T[]): T { return arr[Math.floor(Math.random() * arr.length)]; }
function id(prefix: string) { return `${prefix}-${Math.random().toString(36).slice(2, 8)}`; }

export function generateMockVehicles(n: number): Vehicle[] {
  const cities = [
    { name: 'Dallas, TX', lat: 32.7767, lng: -96.7970 },
    { name: 'Denver, CO', lat: 39.7392, lng: -104.9903 },
    { name: 'Phoenix, AZ', lat: 33.4484, lng: -112.0740 },
    { name: 'Chicago, IL', lat: 41.8781, lng: -87.6298 },
    { name: 'Atlanta, GA', lat: 33.7490, lng: -84.3880 },
  ];
  const statuses: Vehicle['status'][] = ['active', 'idle', 'maintenance', 'offline'];
  const types = ['dry_van', 'reefer', 'flatbed'];
  return Array.from({ length: n }).map((_, i) => {
    const c = choice(cities);
    return {
      id: id('veh'),
      name: `Truck ${i + 1}`,
      type: choice(types),
      status: choice(statuses),
      location: { lat: c.lat + rand(-0.2, 0.2), lng: c.lng + rand(-0.2, 0.2), heading: rand(0, 360), speed: Math.max(0, rand(0, 70)) },
      fuel: Math.round(rand(10, 100)),
      odometer: Math.round(rand(20000, 250000)),
      lastUpdate: new Date(),
    };
  });
}

export function generateMockDrivers(n: number): Driver[] {
  const names = ['John Smith', 'Sarah Johnson', 'Mike Davis', 'Emily Brown', 'Carlos Ruiz', 'Anna Lee'];
  const statuses: Driver['status'][] = ['available', 'on-route', 'off-duty'];
  return Array.from({ length: n }).map(() => ({
    id: id('drv'),
    name: choice(names),
    status: choice(statuses),
    phone: `555${Math.floor(rand(1000000, 9999999))}`,
    rating: Math.round(rand(35, 50)) / 10,
    hoursWorked: Math.round(rand(0, 12)),
  }));
}

export function generateMockLoads(n: number): FleetLoad[] {
  const cities: Location[] = [
    { address: '123 Industrial Blvd', city: 'Dallas', state: 'TX', zipCode: '75201', lat: 32.7767, lng: -96.797 },
    { address: '456 Commerce St', city: 'Phoenix', state: 'AZ', zipCode: '85001', lat: 33.4484, lng: -112.074 },
    { address: '789 Warehouse Way', city: 'Chicago', state: 'IL', zipCode: '60601', lat: 41.8781, lng: -87.6298 },
    { address: '321 Distribution Dr', city: 'Atlanta', state: 'GA', zipCode: '30301', lat: 33.749, lng: -84.388 },
  ];
  const statuses: FleetLoad['status'][] = ['pending', 'assigned', 'in-transit', 'delivered'];
  return Array.from({ length: n }).map(() => {
    const o = choice(cities), d = choice(cities);
    return {
      id: id('load'),
      origin: { lat: o.lat!, lng: o.lng!, address: `${o.city}, ${o.state}` },
      destination: { lat: d.lat!, lng: d.lng!, address: `${d.city}, ${d.state}` },
      waypoints: [],
      estimatedDistance: Math.round(rand(100, 1500)),
      estimatedDuration: Math.round(rand(120, 2400)),
      trafficLevel: choice(['low', 'medium', 'high']),
      fuelCost: Math.round(rand(100, 1500)),
      createdAt: new Date(),
      status: choice(statuses),
    } as any;
  });
}

export function generateMockAlerts(n: number): Alert[] {
  const types: Alert['type'][] = ['geofence', 'maintenance', 'speed', 'route-deviation', 'fuel'];
  const severities: Alert['severity'][] = ['info', 'warning', 'critical'];
  return Array.from({ length: n }).map(() => ({
    id: id('al'),
    organizationId: 'org-1',
    vehicleId: id('veh'),
    type: choice(types),
    severity: choice(severities),
    title: 'System Alert',
    message: 'Sample alert generated by mock data',
    acknowledged: false,
    resolved: false,
    timestamp: new Date(),
    metadata: {},
  }));
}

export function generateMockGeofences(n: number): Geofence[] {
  return Array.from({ length: n }).map((_, i) => ({
    id: id('gf'),
    name: `Zone ${i + 1}`,
    type: Math.random() > 0.7 ? 'restricted' : 'allowed',
    coordinates: [
      [-100 + rand(-5, 5), 35 + rand(-5, 5)],
      [-100 + rand(-5, 5), 36 + rand(-5, 5)],
      [-99 + rand(-5, 5), 36 + rand(-5, 5)],
      [-99 + rand(-5, 5), 35 + rand(-5, 5)],
    ],
    active: true,
    alertOnEntry: true,
    alertOnExit: true,
    allowedVehicleIds: undefined,
    restrictedVehicleIds: undefined,
    createdAt: new Date(),
    updatedAt: new Date(),
  }));
}

export function generateMockMaintenanceRecords(n: number): MaintenanceRecord[] {
  const types: MaintenanceRecord['type'][] = ['oil-change', 'tire-rotation', 'brake-service', 'inspection', 'pm-service', 'filter-replacement', 'fluid-service'];
  const statuses: MaintenanceRecord['status'][] = ['scheduled', 'overdue', 'completed'];
  return Array.from({ length: n }).map(() => ({
    id: id('mnt'),
    vehicleId: id('veh'),
    type: choice(types),
    scheduledDate: new Date(Date.now() + rand(-10, 30) * 86400000),
    completedDate: Math.random() > 0.6 ? new Date() : undefined,
    status: choice(statuses),
    mileage: Math.round(rand(50000, 200000)),
    cost: Math.random() > 0.7 ? Math.round(rand(100, 2500)) : undefined,
    notes: 'Auto-generated mock record',
    nextDueDate: new Date(Date.now() + rand(15, 120) * 86400000),
    nextDueMileage: Math.round(rand(60000, 220000)),
    createdAt: new Date(),
    updatedAt: new Date(),
  }));
}
