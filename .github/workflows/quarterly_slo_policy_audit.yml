name: Quarterly SLO & Policy Audit

on:
  schedule:
    # 08:15 UTC on the 1st day of Jan/Apr/Jul/Oct
    - cron: '15 8 1 1,4,7,10 *'
  workflow_dispatch: {}

jobs:
  audit:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install psql
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client jq

      - name: Export SLO targets and policy artifacts
        id: export
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
        run: |
          mkdir -p artifacts
          if [ -n "$SUPABASE_DB_URL" ]; then
            psql "$SUPABASE_DB_URL" -At -c "select json_agg(row_to_json(t)) from (select * from public.slo_targets order by fn) t" > artifacts/slo_targets.json || echo "[]" > artifacts/slo_targets.json
          else
            echo "[]" > artifacts/slo_targets.json
          fi
          # Extract current policy baseline from repo SQL (RLS & policies)
          grep -RInh --include="*.sql" -E "create policy|alter table .* enable row level security" || true > artifacts/policies.sql
          sed -i 's/[[:space:]]\+/ /g' artifacts/policies.sql || true
          echo "slo_json=$(cat artifacts/slo_targets.json)" >> $GITHUB_OUTPUT

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: quarterly-slo-policy-${{ github.run_id }}
          path: artifacts

      - name: Open/Update Quarterly Audit issue
        uses: actions/github-script@v7
        env:
          SLO_JSON: ${{ steps.export.outputs.slo_json }}
        with:
          script: |
            const today = new Date();
            const year = today.getUTCFullYear();
            const q = Math.floor((today.getUTCMonth())/3)+1;
            const title = `Quarterly Policy & SLO Audit â€“ ${year}-Q${q}`;
            const slo = process.env.SLO_JSON && process.env.SLO_JSON !== '' ? JSON.parse(process.env.SLO_JSON) : [];
            const body = [
              '## Scope',
              '- Review RLS/policy baseline (policies.sql artifact).',
              '- Review SLO targets in public.slo_targets and adjust thresholds as needed.',
              '',
              '## Current SLO Targets',
              '```json',
              JSON.stringify(slo, null, 2),
              '```',
              '',
              '## Actions',
              '- [ ] Confirm policy baseline up to date',
              '- [ ] Confirm SLO targets align with current performance',
              '- [ ] Adjust alert thresholds/routes as needed',
            ].join('\n');

            // Find existing issue by title prefix
            const { data: issues } = await github.rest.issues.listForRepo({ owner: context.repo.owner, repo: context.repo.repo, state: 'open', labels: 'governance' });
            const existing = issues.find(i => i.title.startsWith('Quarterly Policy & SLO Audit'));
            if (existing) {
              await github.rest.issues.update({ owner: context.repo.owner, repo: context.repo.repo, issue_number: existing.number, title, body });
            } else {
              await github.rest.issues.create({ owner: context.repo.owner, repo: context.repo.repo, title, body, labels: ['governance'] });
            }
